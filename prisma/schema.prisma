// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  clerkId   String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  stripeId  String?

  // Relationships
  subscription   Billings?
  domains        Domain[]
  workspaces     Workspace[]
  campaigns      Campaign[]
  socialAccounts SocialAccount[]
  appointments   Appointment[]
  aiUsage        AIUsage[]
}

model Domain {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  icon            String
  chatBot         ChatBot?
  helpdesk        HelpDesk[]
  filterQuestions FilterQuestions[]
  products        Product[]

  customer   Customer[]
  User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?    @db.Uuid
  Campaign   Campaign?  @relation(fields: [campaignId], references: [id])
  campaignId String?    @db.Uuid
}

model ChatBot {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  welcomeMessage String?
  icon           String?
  background     String?
  textColor      String?
  helpdesk       Boolean @default(false)
  Domain         Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId       String? @unique @db.Uuid
}

model Billings {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan                 Plans     @default(FREE)
  aiTokens             Int       @default(20)
  emailCredits         Int       @default(10)
  socialPosts          Int       @default(0)
  workspaceLimit       Int       @default(1)
  stripeSubscriptionId String?
  currentPeriodEnd     DateTime?
  User                 User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?   @unique @db.Uuid
}

model HelpDesk {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answer   String

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model FilterQuestions {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answered String?

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model CustomerResponses {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question   String
  answered   String?
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.Uuid
}

model Customer {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String?

  questions CustomerResponses[]

  chatRoom ChatRoom[]

  booking Bookings[]

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model ChatRoom {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  live       Boolean   @default(false)
  mailed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.Uuid

  message ChatMessage[]
}

model ChatMessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  role       Role?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?   @db.Uuid
  seen       Boolean   @default(false)
}

model Bookings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime
  slot       String
  email      String
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.Uuid
  domainId   String?   @db.Uuid
  createdAt  DateTime  @default(now())
}

model Campaign {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  type        String // EMAIL, SOCIAL, CONTENT
  status      String    @default("DRAFT")
  content     Json?
  scheduledAt DateTime?
  User        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.Uuid
  domains     Domain[] // Add this line
  createdAt   DateTime  @default(now())
}

model Product {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  Domain    Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String?  @db.Uuid
}

model Workspace {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @db.Uuid
  campaigns   Campaign[]
  createdAt   DateTime   @default(now())
}

model SocialAccount {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platform     String
  accessToken  String
  refreshToken String?
  accountId    String
  accountName  String
  User         User    @relation(fields: [userId], references: [id])
  userId       String  @db.Uuid
}

model Appointment {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  attendeeEmail String
  status        String   @default("SCHEDULED")
  User          User     @relation(fields: [userId], references: [id])
  userId        String   @db.Uuid
  createdAt     DateTime @default(now())
}

model AIUsage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      String // CONTENT_GENERATION, CHATBOT, EMAIL_TEMPLATE
  tokens    Int
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}

enum Plans {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum Role {
  user
  assistant
}
